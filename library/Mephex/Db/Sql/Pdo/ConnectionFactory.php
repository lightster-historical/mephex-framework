<?php



/**
 * Generates a PDO connection based on options provided in a config option set. 
 * 
 * @author mlight
 */
class Mephex_Db_Sql_Pdo_ConnectionFactory
implements Mephex_Db_Sql_Base_ConnectionFactory
{
	/**
	 * Credential factory used to generate Mephex_Db_Sql_Pdo_CredentialFactory
	 * objects based on configuration options.
	 * 
	 * @var Mephex_Db_Sql_Pdo_CredentialFactory
	 */
	protected $_credential_factory;
	
	
	
	public function __construct()
	{
		$this->_credential_factory	= $this->getDefaultCredentialFactory();
	}
	
	
	
	/**
	 * Generates an instance of the default credential factory.
	 * 
	 * @return Mephex_Db_Sql_Pdo_CredentialFactory
	 */
	protected function getDefaultCredentialFactory()
	{
		return new Mephex_Db_Sql_Pdo_CredentialFactory();
	}
	
	
	
	/**
	 * Generates a connection to a database using a config option set,
	 * the group name, and connection name.
	 * 
	 * @param Mephex_Config_OptionSet $config
	 * @param string $group
	 * @param string $connection_name
	 * @return Mephex_Db_Sql_Pdo_Credential
	 */
	public function connectUsingConfig(
		Mephex_Config_OptionSet $config, $group, $connection_name
	)
	{
		try
		{
			// try to get a 'write' credential (which can be used for
			// writing and reading)
			$write_credential	= $this->_credential_factory->loadFromConfig(
				$config, $group, "{$connection_name}.write"
			);
			
			try
			{
				// try to get a 'read' credential (which can only be used for
				// reading)
				$read_credential	= $this->_credential_factory->loadFromConfig(
					$config, $group, "{$connection_name}.read"
				);
			}
			catch(Mephex_Exception $read_ex)
			{
				// if a 'read' credential could not be loaded, we use
				// a null credential (which causes the 'write' connection to be 
				// used)
				$read_credential	= null;
			}
		}
		catch(Mephex_Exception $write_ex)
		{
			try
			{
				// if a 'write' credential could not be loaded (which also means
				// a 'read' credential was not loaded), attempt to load a general
				// credential
				$write_credential	= $this->_credential_factory->loadFromConfig(
					$config, $group, "{$connection_name}"
				);
				$read_credential	= null;
			}
			catch(Mephex_Exception $general_ex)
			{
				// if a general credential could not be loaded, throw the
				// exception generated by attemptingto load the 'write' credential
				throw $write_ex;
			}
		}
		
		return $this->connectUsingCredentials(
			$write_credential, $read_credential
		);
	}
	
	
	
	
	/**
	 * Generates a connection using the given credentials.
	 * 
	 * @param Mephex_Db_Sql_Pdo_Credential $write_credential
	 * @param Mephex_Db_Sql_Pdo_Credential $read_credential
	 * @return Mephex_Db_Sql_Pdo_Connection
	 */
	protected function connectUsingCredentials(
		Mephex_Db_Sql_Pdo_Credential $write_credential,
		Mephex_Db_Sql_Pdo_Credential $read_credential = null
	)
	{
		return new Mephex_Db_Sql_Pdo_Connection(
			$write_credential, $read_credential
		);
	}
}