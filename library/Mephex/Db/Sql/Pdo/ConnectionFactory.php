<?php



/**
 * Generates a PDO connection based on options provided in a config option set. 
 * 
 * @author mlight
 */
class Mephex_Db_Sql_Pdo_ConnectionFactory
implements Mephex_Db_Sql_Base_ConnectionFactory
{
	/**
	 * Generates a credential factory using the given config option set and
	 * the given config group.
	 *
	 * @param Mephex_Config_OptionSet $config - the config option set to use
	 *		for determining credential property values
	 * @param string $group - the config group to use for determining credential
	 * 		property values
	 * @return Mephex_Db_Sql_Pdo_CredentialFactory_Configurable
	 */
	protected function getCredentialFactory(Mephex_Config_OptionSet $config, $group)
	{
		return new Mephex_Db_Sql_Pdo_CredentialFactory_Configurable(
			$config,
			$group
		);
	}



	/**
	 * Generates a connection to a database using a config option set,
	 * the group name, and connection name.
	 * 
	 * @param Mephex_Config_OptionSet $config
	 * @param string $group
	 * @param string $connection_name
	 * @return Mephex_Db_Sql_Pdo_CredentialDetails
	 */
	public function connectUsingConfig(
		Mephex_Config_OptionSet $config, $group, $connection_name
	)
	{
		$credential_factory	= $this->getCredentialFactory($config, $group);

		try
		{
			// try to get a 'write' credential (which can be used for
			// writing and reading)
			$write_credential	= $credential_factory->getCredential(
				"{$connection_name}.write"
			);
			
			try
			{
				// try to get a 'read' credential (which can only be used for
				// reading)
				$read_credential	= $credential_factory->getCredential(
					"{$connection_name}.read"
				);
			}
			catch(Mephex_Config_OptionSet_Exception_UnknownKey $read_ex)
			{
				// if a 'read' credential could not be loaded, we use
				// a null credential (which causes the 'write' connection to be 
				// used)
				$read_credential	= null;
			}
		}
		catch(Mephex_Config_OptionSet_Exception_UnknownKey $write_ex)
		{
			try
			{
				// if a 'write' credential could not be loaded (which also means
				// a 'read' credential was not loaded), attempt to load a general
				// credential
				$write_credential	= $credential_factory->getCredential(
					"{$connection_name}"
				);
				$read_credential	= null;
			}
			catch(Mephex_Config_OptionSet_Exception_UnknownKey $general_ex)
			{
				// if a general credential could not be loaded, throw the
				// exception generated by attemptingto load the 'write' credential
				throw $write_ex;
			}
		}
		
		return $this->connectUsingCredentials(
			new Mephex_Db_Sql_Base_Quoter_Mysql(),
			$write_credential,
			$read_credential
		);
	}
	
	
	
	
	/**
	 * Generates a connection using the given credentials.
	 * 
	 * @param Mephex_Db_Sql_Quoter $quoter - the quoter used for escaping SQL
	 *		query values, fields, and table names
	 * @param Mephex_Db_Sql_Pdo_CredentialDetails $write_credential
	 * @param Mephex_Db_Sql_Pdo_CredentialDetails $read_credential
	 * @return Mephex_Db_Sql_Pdo_Connection
	 */
	protected function connectUsingCredentials(
		Mephex_Db_Sql_Quoter $quoter,
		Mephex_Db_Sql_Pdo_CredentialDetails $write_credential,
		Mephex_Db_Sql_Pdo_CredentialDetails $read_credential = null
	)
	{
		return new Mephex_Db_Sql_Pdo_Connection(
			$quoter,
			$write_credential,
			$read_credential
		);
	}
}